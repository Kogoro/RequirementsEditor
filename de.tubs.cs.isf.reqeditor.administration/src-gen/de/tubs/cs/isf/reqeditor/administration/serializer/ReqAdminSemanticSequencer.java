/*
 * generated by Xtext 2.10.0
 */
package de.tubs.cs.isf.reqeditor.administration.serializer;

import com.google.inject.Inject;
import de.tubs.cs.isf.reqeditor.administration.services.ReqAdminGrammarAccess;
import de.tubs.cs.isf.requirementseditor.Attribute;
import de.tubs.cs.isf.requirementseditor.AttributeValue;
import de.tubs.cs.isf.requirementseditor.Constraint;
import de.tubs.cs.isf.requirementseditor.Expression;
import de.tubs.cs.isf.requirementseditor.Requirement;
import de.tubs.cs.isf.requirementseditor.RequirementsEditorPackage;
import de.tubs.cs.isf.requirementseditor.RequirementsGroup;
import de.tubs.cs.isf.requirementseditor.RequirementsModel;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class ReqAdminSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ReqAdminGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RequirementsEditorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RequirementsEditorPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case RequirementsEditorPackage.ATTRIBUTE_VALUE:
				sequence_AttributeValue(context, (AttributeValue) semanticObject); 
				return; 
			case RequirementsEditorPackage.CONSTRAINT:
				sequence_Constraint(context, (Constraint) semanticObject); 
				return; 
			case RequirementsEditorPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case RequirementsEditorPackage.REQUIREMENT:
				sequence_Requirement(context, (Requirement) semanticObject); 
				return; 
			case RequirementsEditorPackage.REQUIREMENTS_GROUP:
				sequence_RequirementsGroup(context, (RequirementsGroup) semanticObject); 
				return; 
			case RequirementsEditorPackage.REQUIREMENTS_MODEL:
				sequence_RequirementsModel(context, (RequirementsModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AttributeValue returns AttributeValue
	 *
	 * Constraint:
	 *     (valueOf=[Attribute|EString]? value=EString?)
	 */
	protected void sequence_AttributeValue(ISerializationContext context, AttributeValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     id=EString?
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns Constraint
	 *
	 * Constraint:
	 *     (name=EString (expression+=Expression expression+=Expression*)?)
	 */
	protected void sequence_Constraint(ISerializationContext context, Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     {Expression}
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementModelElement returns Requirement
	 *     Requirement returns Requirement
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         id=EString? 
	 *         description=EString? 
	 *         type=RequirementType? 
	 *         priority=RequirementPriority? 
	 *         (constraints+=Constraint constraints+=Constraint*)? 
	 *         (attributes+=AttributeValue attributes+=AttributeValue*)?
	 *     )
	 */
	protected void sequence_Requirement(ISerializationContext context, Requirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementModelElement returns RequirementsGroup
	 *     RequirementsGroup returns RequirementsGroup
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         id=EString? 
	 *         description=EString? 
	 *         (constraints+=Constraint constraints+=Constraint*)? 
	 *         (elements+=RequirementModelElement elements+=RequirementModelElement*)?
	 *     )
	 */
	protected void sequence_RequirementsGroup(ISerializationContext context, RequirementsGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementsModel returns RequirementsModel
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         creator=EString? 
	 *         version=EString? 
	 *         (elements+=RequirementModelElement elements+=RequirementModelElement*)? 
	 *         (attributes+=Attribute attributes+=Attribute*)?
	 *     )
	 */
	protected void sequence_RequirementsModel(ISerializationContext context, RequirementsModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
