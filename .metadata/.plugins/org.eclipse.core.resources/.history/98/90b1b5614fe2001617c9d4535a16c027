// automatically generated by Xtext
grammar de.tubs.cs.isf.reqeditor.administration.ReqAdmin with org.eclipse.xtext.common.Terminals

import "http://www.isf.cs.tu-bs.de/reqeditor"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore



RequirementsModel:
	'RequirementsModel' name = EString
		('by' creator=EString)?
		('ver' version =EString)?
		('with' 'requirements'  '{' elements+=RequirementModelElement(',' elements+=RequirementModelElement)* '}' )?
;

EString returns ecore::EString:
	STRING | ID
;

RequirementModelElement returns RequirementModelElement:
	('create' RequirementsGroup) | ('create' Requirement);

RequirementsGroup returns RequirementsGroup:
	{RequirementsGroup} 'RequirementsGroup' name=EString 'with'
	'['
		('id' id=EString)?
		('description:' description=EString)?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('elements' '{' elements+=RequirementModelElement ( "," elements+=RequirementModelElement)* '}' )?
	']'
	;

/*RequirementsModel returns RequirementsModel:
	{RequirementsModel} 'RequirementsModel' name=EString
	'['	
		('author' creator=EString)?
		('version' version=EString)?
		('elements' '{' elements+=RequirementModelElement ( "," elements+=RequirementModelElement)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	']'
	;

RequirementModelElement returns RequirementModelElement:
	('create' RequirementsGroup) | ('create' Requirement);

EString returns ecore::EString:
	STRING | ID;

Attribute returns Attribute:
	{Attribute}
	'Attribute' (id=EString)?;

Constraint returns Constraint:
	{Constraint}
	'Constraint' name=EString 'with'
		('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
	;

RequirementsGroup returns RequirementsGroup:
	{RequirementsGroup} 'RequirementsGroup' name=EString 'with'
	'['
		('id' id=EString)?
		('description:' description=EString)?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('elements' '{' elements+=RequirementModelElement ( "," elements+=RequirementModelElement)* '}' )?
	']'
	;

Requirement returns Requirement:
	{Requirement} 'Requirement' name=EString 'with'
	'['
		('id' id=EString)?
		('description' description=EString)?
		('type' type=RequirementType)?
		('priority' priority=RequirementPriority)?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('attributes' '{' attributes+=AttributeValue ( "," attributes+=AttributeValue)* '}' )?
	']';

//Terminal BOOLEAN: 'true' | 'false';

Expression returns Expression:
	{Expression}
	'create' 'Expression with'
		//helper function or expression to test boolean expression
	;

enum RequirementType returns RequirementType:
				FUNCTIONAL = 'FUNCTIONAL' | NON_FUNCTIONAL = 'NON_FUNCTIONAL' | NONE = 'NONE' | OTHER = 'OTHER';

enum RequirementPriority returns RequirementPriority:
				ESSENTIAL = 'ESSENTIAL' | CONDITIONAL = 'CONDITIONAL' | OPTIONAL = 'OPTIONAL';
				

AttributeValue returns AttributeValue:
	{AttributeValue}
	'AttributeValue'
	('value of' valueOf=[Attribute|EString])?
	('with value' value=EString)?
	;
*/