// automatically generated by Xtext
grammar de.tubs.cs.isf.reqeditor.dsl.Reqs with org.eclipse.xtext.common.Terminals

import "http://www.isf.cs.tu-bs.de/reqeditor" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RequirementsModel returns RequirementsModel:
	{RequirementsModel}
	'new requirements model'
	name=EString
		('created by' creator=EString)?
		('version' version=EString)?
		('add elements' '{' elements+=RequirementModelElement ( "," elements+=RequirementModelElement)* '}' )?
		('add attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	;

RequirementModelElement returns RequirementModelElement:
	'new' RequirementsGroup | 'new' Requirement;


Expression returns Expression:
	OR | AND | NOT | Literal;



EString returns ecore::EString:
	STRING | ID;

Attribute returns Attribute:
	{Attribute}
	'new attribute'
	
		('id' id=EString)?
	;

Constraint returns Constraint:
	{Constraint}
	'new Constraint'
	name=EString
		('add expression' expression+=Expression ( "," expression+=Expression)*)?
	;

RequirementsGroup returns RequirementsGroup:
	{RequirementsGroup}
	'new RequirementsGroup'
	name=EString
		('id' id=EString)?
		('description' description=EString)?
		('constraints' constraints+=Constraint ( "," constraints+=Constraint)*)?
		('elements' elements+=RequirementModelElement ( "," elements+=RequirementModelElement)*)?
	;

Requirement returns Requirement:
	{Requirement}
	'new Requirement'
	name=EString
		('id' id=EString)?
		('description' description=EString)?
		('type' type=RequirementType)?
		('priority' priority=RequirementPriority)?
		('add constraints' constraints+=Constraint ( "," constraints+=Constraint)*)?
		('add attributes' attributes+=AttributeValue ( "," attributes+=AttributeValue)*)?
	;

OR returns OR:
	'OR'
		'operand1' operand1=[Expression|EString]
		'operand2' operand2=[Expression|EString]
	;

AND returns AND:
	'AND'
		'operand1' operand1=[Expression|EString]
		'operand2' operand2=[Expression|EString]
	;

NOT returns NOT:
	'NOT'
		'operand1' operand1=[Expression|EString]
	;

Literal returns Literal:
	'new Literal'
		'element' element=[RequirementModelElement|EString]
	;

enum RequirementType returns RequirementType:
				FUNCTIONAL = 'FUNCTIONAL' | NON_FUNCTIONAL = 'NON_FUNCTIONAL' | NONE = 'NONE' | OTHER = 'OTHER';

enum RequirementPriority returns RequirementPriority:
				ESSENTIAL = 'ESSENTIAL' | CONDITIONAL = 'CONDITIONAL' | OPTIONAL = 'OPTIONAL';

AttributeValue returns AttributeValue:
	{AttributeValue}
	'new AttributeValue'
		('value' value=EString)?
		('valueOf' valueOf=[Attribute|EString])?
	;
