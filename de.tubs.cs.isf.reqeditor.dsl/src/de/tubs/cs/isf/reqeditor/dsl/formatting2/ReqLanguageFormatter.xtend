/*
 * generated by Xtext 2.11.0
 */
package de.tubs.cs.isf.reqeditor.dsl.formatting2

import com.google.inject.Inject
import de.tubs.cs.isf.reqeditor.dsl.services.ReqLanguageGrammarAccess
import de.tubs.cs.isf.requirementseditor.Attribute
import de.tubs.cs.isf.requirementseditor.Constraint
import de.tubs.cs.isf.requirementseditor.Expression
import de.tubs.cs.isf.requirementseditor.RequirementModelElement
import de.tubs.cs.isf.requirementseditor.RequirementsModel
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class ReqLanguageFormatter extends AbstractFormatter2 {
	
	@Inject extension ReqLanguageGrammarAccess

	def dispatch void format(RequirementsModel requirementsModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (RequirementModelElement requirementModelElement : requirementsModel.getElements()) {
			requirementModelElement.format;
		}
		for (Attribute attribute : requirementsModel.getAttributes()) {
			attribute.format;
		}
	}

	def dispatch void format(Constraint constraint, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expression : constraint.getExpression()) {
			expression.format;
		}
	}
	
	// TODO: implement for RequirementsGroup, Requirement, OR, AND, NOT
}
