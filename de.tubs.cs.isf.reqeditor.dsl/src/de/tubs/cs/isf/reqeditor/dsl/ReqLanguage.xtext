// automatically generated by Xtext
grammar de.tubs.cs.isf.reqeditor.dsl.ReqLanguage with org.eclipse.xtext.common.Terminals

import "http://www.isf.cs.tu-bs.de/reqeditor" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RequirementsModel returns RequirementsModel:
	{RequirementsModel}
	'new' 'RequirementsModel'
	name=EString
		('created' 'by' creator=EString)?
		('version' version=EString)?
		('elements' '{' elements+=RequirementModelElement ( "," elements+=RequirementModelElement)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	;

RequirementModelElement returns RequirementModelElement:
	RequirementsGroup | Requirement;


Expression returns Expression:
	 OR | AND | NOT | Literal;


EString returns ecore::EString:
	STRING | ID;

Attribute returns Attribute:
	{Attribute}
	'new' 'Attribute'
		('id' id=EString)?
	;

Constraint returns Constraint:
	{Constraint}
	'new' 'Constraint'
	name=EString
		(expression+=Expression ( "," expression+=Expression)*)?
	;

RequirementsGroup returns RequirementsGroup:
	{RequirementsGroup}
	'new' 'RequirementsGroup'
	name=EString
		('id' id=EString)?
		('description' description=EString)?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('elements' '{' elements+=RequirementModelElement ( "," elements+=RequirementModelElement)* '}' )?
	;

Requirement returns Requirement:
	{Requirement}
	'new' 'Requirement'
	name=EString
		('id' id=EString)?
		('description' description=EString)?
		('type' type=RequirementType)?
		('priority' priority=RequirementPriority)?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('attributes' '{' attributes+=AttributeValue ( "," attributes+=AttributeValue)* '}' )?
	;

OR returns OR:
	'('
		operand1=Expression
		'OR'
		operand2=Expression
	')'
	;

AND returns AND:
	'['
		operand1=Expression
		'AND'
		operand2=Expression
	']'
	;

NOT returns NOT:
	'NOT' '('
		'operand1' operand1=Expression
	')'
	;

Literal returns Literal:
		element=[RequirementModelElement|EString]
	;

enum RequirementType returns RequirementType:
				FUNCTIONAL = 'FUNCTIONAL' | NON_FUNCTIONAL = 'NON_FUNCTIONAL' | NONE = 'NONE' | OTHER = 'OTHER';

enum RequirementPriority returns RequirementPriority:
				ESSENTIAL = 'ESSENTIAL' | CONDITIONAL = 'CONDITIONAL' | OPTIONAL = 'OPTIONAL';

AttributeValue returns AttributeValue:
	{AttributeValue}
	'new' 'AttributeValue'
		('value' value=EString)?
		('valueOf' valueOf=[Attribute|EString])?
	;
