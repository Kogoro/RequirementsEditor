/*
 * generated by Xtext 2.11.0
 */
package de.tubs.cs.isf.reqeditor.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReqLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RequirementsModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.RequirementsModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequirementsModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequirementsModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCreatedKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cByKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cCreatorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cCreatorEStringParserRuleCall_3_2_0 = (RuleCall)cCreatorAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVersionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVersionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVersionEStringParserRuleCall_4_1_0 = (RuleCall)cVersionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAttributesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAreKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cAttributesAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_5_3_0 = (RuleCall)cAttributesAssignment_5_3.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cGroup_5.eContents().get(4);
		private final Keyword cCommaKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Assignment cAttributesAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_5_4_1_0 = (RuleCall)cAttributesAssignment_5_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cElementsRequirementModelElementParserRuleCall_6_0_0 = (RuleCall)cElementsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cElementsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cElementsRequirementModelElementParserRuleCall_6_1_1_0 = (RuleCall)cElementsAssignment_6_1_1.eContents().get(0);
		
		//RequirementsModel:
		//	{RequirementsModel}
		//	'requirementsModel'
		//	name=EString ('created' 'by' creator=EString)? ('version' version=EString)? ('attributes' 'are' '{'
		//	attributes+=Attribute ("," attributes+=Attribute)* '}')? (elements+=RequirementModelElement (","
		//	elements+=RequirementModelElement)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RequirementsModel} 'requirementsModel' name=EString ('created' 'by' creator=EString)? ('version' version=EString)?
		//('attributes' 'are' '{' attributes+=Attribute ("," attributes+=Attribute)* '}')? (elements+=RequirementModelElement
		//("," elements+=RequirementModelElement)*)?
		public Group getGroup() { return cGroup; }
		
		//{RequirementsModel}
		public Action getRequirementsModelAction_0() { return cRequirementsModelAction_0; }
		
		//'requirementsModel'
		public Keyword getRequirementsModelKeyword_1() { return cRequirementsModelKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('created' 'by' creator=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'created'
		public Keyword getCreatedKeyword_3_0() { return cCreatedKeyword_3_0; }
		
		//'by'
		public Keyword getByKeyword_3_1() { return cByKeyword_3_1; }
		
		//creator=EString
		public Assignment getCreatorAssignment_3_2() { return cCreatorAssignment_3_2; }
		
		//EString
		public RuleCall getCreatorEStringParserRuleCall_3_2_0() { return cCreatorEStringParserRuleCall_3_2_0; }
		
		//('version' version=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'version'
		public Keyword getVersionKeyword_4_0() { return cVersionKeyword_4_0; }
		
		//version=EString
		public Assignment getVersionAssignment_4_1() { return cVersionAssignment_4_1; }
		
		//EString
		public RuleCall getVersionEStringParserRuleCall_4_1_0() { return cVersionEStringParserRuleCall_4_1_0; }
		
		//('attributes' 'are' '{' attributes+=Attribute ("," attributes+=Attribute)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'attributes'
		public Keyword getAttributesKeyword_5_0() { return cAttributesKeyword_5_0; }
		
		//'are'
		public Keyword getAreKeyword_5_1() { return cAreKeyword_5_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_2() { return cLeftCurlyBracketKeyword_5_2; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_5_3() { return cAttributesAssignment_5_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_3_0() { return cAttributesAttributeParserRuleCall_5_3_0; }
		
		//("," attributes+=Attribute)*
		public Group getGroup_5_4() { return cGroup_5_4; }
		
		//","
		public Keyword getCommaKeyword_5_4_0() { return cCommaKeyword_5_4_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_5_4_1() { return cAttributesAssignment_5_4_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_4_1_0() { return cAttributesAttributeParserRuleCall_5_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_5() { return cRightCurlyBracketKeyword_5_5; }
		
		//(elements+=RequirementModelElement ("," elements+=RequirementModelElement)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//elements+=RequirementModelElement
		public Assignment getElementsAssignment_6_0() { return cElementsAssignment_6_0; }
		
		//RequirementModelElement
		public RuleCall getElementsRequirementModelElementParserRuleCall_6_0_0() { return cElementsRequirementModelElementParserRuleCall_6_0_0; }
		
		//("," elements+=RequirementModelElement)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//elements+=RequirementModelElement
		public Assignment getElementsAssignment_6_1_1() { return cElementsAssignment_6_1_1; }
		
		//RequirementModelElement
		public RuleCall getElementsRequirementModelElementParserRuleCall_6_1_1_0() { return cElementsRequirementModelElementParserRuleCall_6_1_1_0; }
	}
	public class RequirementModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.RequirementModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequirementsGroupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequirementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RequirementModelElement:
		//	RequirementsGroup | Requirement;
		@Override public ParserRule getRule() { return rule; }
		
		//RequirementsGroup | Requirement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RequirementsGroup
		public RuleCall getRequirementsGroupParserRuleCall_0() { return cRequirementsGroupParserRuleCall_0; }
		
		//Requirement
		public RuleCall getRequirementParserRuleCall_1() { return cRequirementParserRuleCall_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cORParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNOTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//	OR | AND | NOT | Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//OR | AND | NOT | Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OR
		public RuleCall getORParserRuleCall_0() { return cORParserRuleCall_0; }
		
		//AND
		public RuleCall getANDParserRuleCall_1() { return cANDParserRuleCall_1; }
		
		//NOT
		public RuleCall getNOTParserRuleCall_2() { return cNOTParserRuleCall_2; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_3() { return cLiteralParserRuleCall_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdEStringParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		//Attribute:
		//	{Attribute}
		//	'attribute'
		//	id=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} 'attribute' id=EString
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//id=EString
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_2_0() { return cIdEStringParserRuleCall_2_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConstraintKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0_0 = (RuleCall)cExpressionAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_1_0 = (RuleCall)cExpressionAssignment_4_1_1.eContents().get(0);
		
		//Constraint:
		//	{Constraint}
		//	'new' 'constraint'
		//	name=EString (expression+=Expression ("," expression+=Expression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Constraint} 'new' 'constraint' name=EString (expression+=Expression ("," expression+=Expression)*)?
		public Group getGroup() { return cGroup; }
		
		//{Constraint}
		public Action getConstraintAction_0() { return cConstraintAction_0; }
		
		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
		
		//'constraint'
		public Keyword getConstraintKeyword_2() { return cConstraintKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//(expression+=Expression ("," expression+=Expression)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4_0() { return cExpressionAssignment_4_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0_0() { return cExpressionExpressionParserRuleCall_4_0_0; }
		
		//("," expression+=Expression)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4_1_1() { return cExpressionAssignment_4_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_1_0() { return cExpressionExpressionParserRuleCall_4_1_1_0; }
	}
	public class RequirementsGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.RequirementsGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequirementsGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequirementsGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdEStringParserRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cIsKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDescriptionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_6_2_0 = (RuleCall)cDescriptionAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cConstraintsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cAreKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cConstraintsAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cConstraintsConstraintParserRuleCall_7_3_0 = (RuleCall)cConstraintsAssignment_7_3.eContents().get(0);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Keyword cCommaKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Assignment cConstraintsAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_7_4_1_0 = (RuleCall)cConstraintsAssignment_7_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElementsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cAreKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cElementsAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cElementsRequirementModelElementParserRuleCall_8_3_0 = (RuleCall)cElementsAssignment_8_3.eContents().get(0);
		private final Group cGroup_8_4 = (Group)cGroup_8.eContents().get(4);
		private final Keyword cCommaKeyword_8_4_0 = (Keyword)cGroup_8_4.eContents().get(0);
		private final Assignment cElementsAssignment_8_4_1 = (Assignment)cGroup_8_4.eContents().get(1);
		private final RuleCall cElementsRequirementModelElementParserRuleCall_8_4_1_0 = (RuleCall)cElementsAssignment_8_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		
		//RequirementsGroup:
		//	{RequirementsGroup}
		//	'requirementsGroup'
		//	name=EString
		//	'id' 'is' id=EString ('description' 'is' description=EString)? ('constraints' 'are' '{' constraints+=Constraint (","
		//	constraints+=Constraint)* '}')? ('elements' 'are' '{' elements+=RequirementModelElement (","
		//	elements+=RequirementModelElement)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RequirementsGroup} 'requirementsGroup' name=EString 'id' 'is' id=EString ('description' 'is' description=EString)?
		//('constraints' 'are' '{' constraints+=Constraint ("," constraints+=Constraint)* '}')? ('elements' 'are' '{'
		//elements+=RequirementModelElement ("," elements+=RequirementModelElement)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{RequirementsGroup}
		public Action getRequirementsGroupAction_0() { return cRequirementsGroupAction_0; }
		
		//'requirementsGroup'
		public Keyword getRequirementsGroupKeyword_1() { return cRequirementsGroupKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'id'
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//id=EString
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_5_0() { return cIdEStringParserRuleCall_5_0; }
		
		//('description' 'is' description=EString)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'description'
		public Keyword getDescriptionKeyword_6_0() { return cDescriptionKeyword_6_0; }
		
		//'is'
		public Keyword getIsKeyword_6_1() { return cIsKeyword_6_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_6_2() { return cDescriptionAssignment_6_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_6_2_0() { return cDescriptionEStringParserRuleCall_6_2_0; }
		
		//('constraints' 'are' '{' constraints+=Constraint ("," constraints+=Constraint)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_7_0() { return cConstraintsKeyword_7_0; }
		
		//'are'
		public Keyword getAreKeyword_7_1() { return cAreKeyword_7_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_2() { return cLeftCurlyBracketKeyword_7_2; }
		
		//constraints+=Constraint
		public Assignment getConstraintsAssignment_7_3() { return cConstraintsAssignment_7_3; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_7_3_0() { return cConstraintsConstraintParserRuleCall_7_3_0; }
		
		//("," constraints+=Constraint)*
		public Group getGroup_7_4() { return cGroup_7_4; }
		
		//","
		public Keyword getCommaKeyword_7_4_0() { return cCommaKeyword_7_4_0; }
		
		//constraints+=Constraint
		public Assignment getConstraintsAssignment_7_4_1() { return cConstraintsAssignment_7_4_1; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_7_4_1_0() { return cConstraintsConstraintParserRuleCall_7_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_5() { return cRightCurlyBracketKeyword_7_5; }
		
		//('elements' 'are' '{' elements+=RequirementModelElement ("," elements+=RequirementModelElement)* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'elements'
		public Keyword getElementsKeyword_8_0() { return cElementsKeyword_8_0; }
		
		//'are'
		public Keyword getAreKeyword_8_1() { return cAreKeyword_8_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_2() { return cLeftCurlyBracketKeyword_8_2; }
		
		//elements+=RequirementModelElement
		public Assignment getElementsAssignment_8_3() { return cElementsAssignment_8_3; }
		
		//RequirementModelElement
		public RuleCall getElementsRequirementModelElementParserRuleCall_8_3_0() { return cElementsRequirementModelElementParserRuleCall_8_3_0; }
		
		//("," elements+=RequirementModelElement)*
		public Group getGroup_8_4() { return cGroup_8_4; }
		
		//","
		public Keyword getCommaKeyword_8_4_0() { return cCommaKeyword_8_4_0; }
		
		//elements+=RequirementModelElement
		public Assignment getElementsAssignment_8_4_1() { return cElementsAssignment_8_4_1; }
		
		//RequirementModelElement
		public RuleCall getElementsRequirementModelElementParserRuleCall_8_4_1_0() { return cElementsRequirementModelElementParserRuleCall_8_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_5() { return cRightCurlyBracketKeyword_8_5; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequirementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequirementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdEStringParserRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDescriptionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cIsKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDescriptionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_7_2_0 = (RuleCall)cDescriptionAssignment_7_2.eContents().get(0);
		private final Keyword cFullStopKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cTypeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cIsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTypeRequirementTypeEnumRuleCall_10_0 = (RuleCall)cTypeAssignment_10.eContents().get(0);
		private final Keyword cFullStopKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cPriorityKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cIsKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cPriorityAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cPriorityRequirementPriorityEnumRuleCall_14_0 = (RuleCall)cPriorityAssignment_14.eContents().get(0);
		private final Keyword cFullStopKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cConstraintsKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Keyword cAreKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cConstraintsAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cConstraintsConstraintParserRuleCall_16_3_0 = (RuleCall)cConstraintsAssignment_16_3.eContents().get(0);
		private final Group cGroup_16_4 = (Group)cGroup_16.eContents().get(4);
		private final Keyword cCommaKeyword_16_4_0 = (Keyword)cGroup_16_4.eContents().get(0);
		private final Assignment cConstraintsAssignment_16_4_1 = (Assignment)cGroup_16_4.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_16_4_1_0 = (RuleCall)cConstraintsAssignment_16_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16_5 = (Keyword)cGroup_16.eContents().get(5);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cAttributesKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Keyword cAreKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Assignment cAttributesAssignment_17_3 = (Assignment)cGroup_17.eContents().get(3);
		private final RuleCall cAttributesAttributeValueParserRuleCall_17_3_0 = (RuleCall)cAttributesAssignment_17_3.eContents().get(0);
		private final Group cGroup_17_4 = (Group)cGroup_17.eContents().get(4);
		private final Keyword cCommaKeyword_17_4_0 = (Keyword)cGroup_17_4.eContents().get(0);
		private final Assignment cAttributesAssignment_17_4_1 = (Assignment)cGroup_17_4.eContents().get(1);
		private final RuleCall cAttributesAttributeValueParserRuleCall_17_4_1_0 = (RuleCall)cAttributesAssignment_17_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17_5 = (Keyword)cGroup_17.eContents().get(5);
		
		//Requirement:
		//	{Requirement}
		//	'requirement'
		//	name=EString
		//	'id' 'is' id=EString '.' ('description' 'is' description=EString '.')?
		//	'type' 'is' type=RequirementType '.'
		//	'priority' 'is' priority=RequirementPriority '.' ('constraints' 'are' '{' constraints+=Constraint (","
		//	constraints+=Constraint)* '}')? ('attributes' 'are' '{' attributes+=AttributeValue ("," attributes+=AttributeValue)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Requirement} 'requirement' name=EString 'id' 'is' id=EString '.' ('description' 'is' description=EString '.')? 'type'
		//'is' type=RequirementType '.' 'priority' 'is' priority=RequirementPriority '.' ('constraints' 'are' '{'
		//constraints+=Constraint ("," constraints+=Constraint)* '}')? ('attributes' 'are' '{' attributes+=AttributeValue (","
		//attributes+=AttributeValue)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Requirement}
		public Action getRequirementAction_0() { return cRequirementAction_0; }
		
		//'requirement'
		public Keyword getRequirementKeyword_1() { return cRequirementKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'id'
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//id=EString
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_5_0() { return cIdEStringParserRuleCall_5_0; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//('description' 'is' description=EString '.')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'description'
		public Keyword getDescriptionKeyword_7_0() { return cDescriptionKeyword_7_0; }
		
		//'is'
		public Keyword getIsKeyword_7_1() { return cIsKeyword_7_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_7_2() { return cDescriptionAssignment_7_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_7_2_0() { return cDescriptionEStringParserRuleCall_7_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_7_3() { return cFullStopKeyword_7_3; }
		
		//'type'
		public Keyword getTypeKeyword_8() { return cTypeKeyword_8; }
		
		//'is'
		public Keyword getIsKeyword_9() { return cIsKeyword_9; }
		
		//type=RequirementType
		public Assignment getTypeAssignment_10() { return cTypeAssignment_10; }
		
		//RequirementType
		public RuleCall getTypeRequirementTypeEnumRuleCall_10_0() { return cTypeRequirementTypeEnumRuleCall_10_0; }
		
		//'.'
		public Keyword getFullStopKeyword_11() { return cFullStopKeyword_11; }
		
		//'priority'
		public Keyword getPriorityKeyword_12() { return cPriorityKeyword_12; }
		
		//'is'
		public Keyword getIsKeyword_13() { return cIsKeyword_13; }
		
		//priority=RequirementPriority
		public Assignment getPriorityAssignment_14() { return cPriorityAssignment_14; }
		
		//RequirementPriority
		public RuleCall getPriorityRequirementPriorityEnumRuleCall_14_0() { return cPriorityRequirementPriorityEnumRuleCall_14_0; }
		
		//'.'
		public Keyword getFullStopKeyword_15() { return cFullStopKeyword_15; }
		
		//('constraints' 'are' '{' constraints+=Constraint ("," constraints+=Constraint)* '}')?
		public Group getGroup_16() { return cGroup_16; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_16_0() { return cConstraintsKeyword_16_0; }
		
		//'are'
		public Keyword getAreKeyword_16_1() { return cAreKeyword_16_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_16_2() { return cLeftCurlyBracketKeyword_16_2; }
		
		//constraints+=Constraint
		public Assignment getConstraintsAssignment_16_3() { return cConstraintsAssignment_16_3; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_16_3_0() { return cConstraintsConstraintParserRuleCall_16_3_0; }
		
		//("," constraints+=Constraint)*
		public Group getGroup_16_4() { return cGroup_16_4; }
		
		//","
		public Keyword getCommaKeyword_16_4_0() { return cCommaKeyword_16_4_0; }
		
		//constraints+=Constraint
		public Assignment getConstraintsAssignment_16_4_1() { return cConstraintsAssignment_16_4_1; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_16_4_1_0() { return cConstraintsConstraintParserRuleCall_16_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16_5() { return cRightCurlyBracketKeyword_16_5; }
		
		//('attributes' 'are' '{' attributes+=AttributeValue ("," attributes+=AttributeValue)* '}')?
		public Group getGroup_17() { return cGroup_17; }
		
		//'attributes'
		public Keyword getAttributesKeyword_17_0() { return cAttributesKeyword_17_0; }
		
		//'are'
		public Keyword getAreKeyword_17_1() { return cAreKeyword_17_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_17_2() { return cLeftCurlyBracketKeyword_17_2; }
		
		//attributes+=AttributeValue
		public Assignment getAttributesAssignment_17_3() { return cAttributesAssignment_17_3; }
		
		//AttributeValue
		public RuleCall getAttributesAttributeValueParserRuleCall_17_3_0() { return cAttributesAttributeValueParserRuleCall_17_3_0; }
		
		//("," attributes+=AttributeValue)*
		public Group getGroup_17_4() { return cGroup_17_4; }
		
		//","
		public Keyword getCommaKeyword_17_4_0() { return cCommaKeyword_17_4_0; }
		
		//attributes+=AttributeValue
		public Assignment getAttributesAssignment_17_4_1() { return cAttributesAssignment_17_4_1; }
		
		//AttributeValue
		public RuleCall getAttributesAttributeValueParserRuleCall_17_4_1_0() { return cAttributesAttributeValueParserRuleCall_17_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17_5() { return cRightCurlyBracketKeyword_17_5; }
	}
	public class ORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.OR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperand1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperand1ExpressionParserRuleCall_1_0 = (RuleCall)cOperand1Assignment_1.eContents().get(0);
		private final Keyword cORKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperand2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperand2ExpressionParserRuleCall_3_0 = (RuleCall)cOperand2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OR:
		//	'('
		//	operand1=Expression
		//	'OR'
		//	operand2=Expression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' operand1=Expression 'OR' operand2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operand1=Expression
		public Assignment getOperand1Assignment_1() { return cOperand1Assignment_1; }
		
		//Expression
		public RuleCall getOperand1ExpressionParserRuleCall_1_0() { return cOperand1ExpressionParserRuleCall_1_0; }
		
		//'OR'
		public Keyword getORKeyword_2() { return cORKeyword_2; }
		
		//operand2=Expression
		public Assignment getOperand2Assignment_3() { return cOperand2Assignment_3; }
		
		//Expression
		public RuleCall getOperand2ExpressionParserRuleCall_3_0() { return cOperand2ExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.AND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperand1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperand1ExpressionParserRuleCall_1_0 = (RuleCall)cOperand1Assignment_1.eContents().get(0);
		private final Keyword cANDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperand2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperand2ExpressionParserRuleCall_3_0 = (RuleCall)cOperand2Assignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AND:
		//	'['
		//	operand1=Expression
		//	'AND'
		//	operand2=Expression
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' operand1=Expression 'AND' operand2=Expression ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//operand1=Expression
		public Assignment getOperand1Assignment_1() { return cOperand1Assignment_1; }
		
		//Expression
		public RuleCall getOperand1ExpressionParserRuleCall_1_0() { return cOperand1ExpressionParserRuleCall_1_0; }
		
		//'AND'
		public Keyword getANDKeyword_2() { return cANDKeyword_2; }
		
		//operand2=Expression
		public Assignment getOperand2Assignment_3() { return cOperand2Assignment_3; }
		
		//Expression
		public RuleCall getOperand2ExpressionParserRuleCall_3_0() { return cOperand2ExpressionParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class NOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.NOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand1ExpressionParserRuleCall_2_0 = (RuleCall)cOperand1Assignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NOT:
		//	'('
		//	'NOT'
		//	operand1=Expression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'NOT' operand1=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_1() { return cNOTKeyword_1; }
		
		//operand1=Expression
		public Assignment getOperand1Assignment_2() { return cOperand1Assignment_2; }
		
		//Expression
		public RuleCall getOperand1ExpressionParserRuleCall_2_0() { return cOperand1ExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.Literal");
		private final Assignment cElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cElementRequirementModelElementCrossReference_0 = (CrossReference)cElementAssignment.eContents().get(0);
		private final RuleCall cElementRequirementModelElementEStringParserRuleCall_0_1 = (RuleCall)cElementRequirementModelElementCrossReference_0.eContents().get(1);
		
		//Literal:
		//	element=[RequirementModelElement|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//element=[RequirementModelElement|EString]
		public Assignment getElementAssignment() { return cElementAssignment; }
		
		//[RequirementModelElement|EString]
		public CrossReference getElementRequirementModelElementCrossReference_0() { return cElementRequirementModelElementCrossReference_0; }
		
		//EString
		public RuleCall getElementRequirementModelElementEStringParserRuleCall_0_1() { return cElementRequirementModelElementEStringParserRuleCall_0_1; }
	}
	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.AttributeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttributeValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEStringParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueOfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cValueOfAttributeCrossReference_4_0 = (CrossReference)cValueOfAssignment_4.eContents().get(0);
		private final RuleCall cValueOfAttributeEStringParserRuleCall_4_0_1 = (RuleCall)cValueOfAttributeCrossReference_4_0.eContents().get(1);
		
		//AttributeValue:
		//	{AttributeValue}
		//	'attributeValue'
		//	value=EString?
		//	'of' valueOf=[Attribute|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//{AttributeValue} 'attributeValue' value=EString? 'of' valueOf=[Attribute|EString]
		public Group getGroup() { return cGroup; }
		
		//{AttributeValue}
		public Action getAttributeValueAction_0() { return cAttributeValueAction_0; }
		
		//'attributeValue'
		public Keyword getAttributeValueKeyword_1() { return cAttributeValueKeyword_1; }
		
		//value=EString?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_2_0() { return cValueEStringParserRuleCall_2_0; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//valueOf=[Attribute|EString]
		public Assignment getValueOfAssignment_4() { return cValueOfAssignment_4; }
		
		//[Attribute|EString]
		public CrossReference getValueOfAttributeCrossReference_4_0() { return cValueOfAttributeCrossReference_4_0; }
		
		//EString
		public RuleCall getValueOfAttributeEStringParserRuleCall_4_0_1() { return cValueOfAttributeEStringParserRuleCall_4_0_1; }
	}
	
	public class RequirementTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.RequirementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFUNCTIONALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFUNCTIONALFUNCTIONALKeyword_0_0 = (Keyword)cFUNCTIONALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNON_FUNCTIONALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNON_FUNCTIONALNON_FUNCTIONALKeyword_1_0 = (Keyword)cNON_FUNCTIONALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNONENONEKeyword_2_0 = (Keyword)cNONEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOTHEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOTHEROTHERKeyword_3_0 = (Keyword)cOTHEREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RequirementType:
		//	FUNCTIONAL | NON_FUNCTIONAL | NONE | OTHER;
		public EnumRule getRule() { return rule; }
		
		//FUNCTIONAL | NON_FUNCTIONAL | NONE | OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FUNCTIONAL
		public EnumLiteralDeclaration getFUNCTIONALEnumLiteralDeclaration_0() { return cFUNCTIONALEnumLiteralDeclaration_0; }
		
		//'FUNCTIONAL'
		public Keyword getFUNCTIONALFUNCTIONALKeyword_0_0() { return cFUNCTIONALFUNCTIONALKeyword_0_0; }
		
		//NON_FUNCTIONAL
		public EnumLiteralDeclaration getNON_FUNCTIONALEnumLiteralDeclaration_1() { return cNON_FUNCTIONALEnumLiteralDeclaration_1; }
		
		//'NON_FUNCTIONAL'
		public Keyword getNON_FUNCTIONALNON_FUNCTIONALKeyword_1_0() { return cNON_FUNCTIONALNON_FUNCTIONALKeyword_1_0; }
		
		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_2() { return cNONEEnumLiteralDeclaration_2; }
		
		//'NONE'
		public Keyword getNONENONEKeyword_2_0() { return cNONENONEKeyword_2_0; }
		
		//OTHER
		public EnumLiteralDeclaration getOTHEREnumLiteralDeclaration_3() { return cOTHEREnumLiteralDeclaration_3; }
		
		//'OTHER'
		public Keyword getOTHEROTHERKeyword_3_0() { return cOTHEROTHERKeyword_3_0; }
	}
	public class RequirementPriorityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tubs.cs.isf.reqeditor.dsl.ReqLanguage.RequirementPriority");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cESSENTIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cESSENTIALESSENTIALKeyword_0_0 = (Keyword)cESSENTIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONDITIONALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONDITIONALCONDITIONALKeyword_1_0 = (Keyword)cCONDITIONALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOPTIONALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOPTIONALOPTIONALKeyword_2_0 = (Keyword)cOPTIONALEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RequirementPriority:
		//	ESSENTIAL | CONDITIONAL | OPTIONAL;
		public EnumRule getRule() { return rule; }
		
		//ESSENTIAL | CONDITIONAL | OPTIONAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ESSENTIAL
		public EnumLiteralDeclaration getESSENTIALEnumLiteralDeclaration_0() { return cESSENTIALEnumLiteralDeclaration_0; }
		
		//'ESSENTIAL'
		public Keyword getESSENTIALESSENTIALKeyword_0_0() { return cESSENTIALESSENTIALKeyword_0_0; }
		
		//CONDITIONAL
		public EnumLiteralDeclaration getCONDITIONALEnumLiteralDeclaration_1() { return cCONDITIONALEnumLiteralDeclaration_1; }
		
		//'CONDITIONAL'
		public Keyword getCONDITIONALCONDITIONALKeyword_1_0() { return cCONDITIONALCONDITIONALKeyword_1_0; }
		
		//OPTIONAL
		public EnumLiteralDeclaration getOPTIONALEnumLiteralDeclaration_2() { return cOPTIONALEnumLiteralDeclaration_2; }
		
		//'OPTIONAL'
		public Keyword getOPTIONALOPTIONALKeyword_2_0() { return cOPTIONALOPTIONALKeyword_2_0; }
	}
	
	private final RequirementsModelElements pRequirementsModel;
	private final RequirementModelElementElements pRequirementModelElement;
	private final ExpressionElements pExpression;
	private final EStringElements pEString;
	private final AttributeElements pAttribute;
	private final ConstraintElements pConstraint;
	private final RequirementsGroupElements pRequirementsGroup;
	private final RequirementElements pRequirement;
	private final ORElements pOR;
	private final ANDElements pAND;
	private final NOTElements pNOT;
	private final LiteralElements pLiteral;
	private final RequirementTypeElements eRequirementType;
	private final RequirementPriorityElements eRequirementPriority;
	private final AttributeValueElements pAttributeValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReqLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRequirementsModel = new RequirementsModelElements();
		this.pRequirementModelElement = new RequirementModelElementElements();
		this.pExpression = new ExpressionElements();
		this.pEString = new EStringElements();
		this.pAttribute = new AttributeElements();
		this.pConstraint = new ConstraintElements();
		this.pRequirementsGroup = new RequirementsGroupElements();
		this.pRequirement = new RequirementElements();
		this.pOR = new ORElements();
		this.pAND = new ANDElements();
		this.pNOT = new NOTElements();
		this.pLiteral = new LiteralElements();
		this.eRequirementType = new RequirementTypeElements();
		this.eRequirementPriority = new RequirementPriorityElements();
		this.pAttributeValue = new AttributeValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tubs.cs.isf.reqeditor.dsl.ReqLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RequirementsModel:
	//	{RequirementsModel}
	//	'requirementsModel'
	//	name=EString ('created' 'by' creator=EString)? ('version' version=EString)? ('attributes' 'are' '{'
	//	attributes+=Attribute ("," attributes+=Attribute)* '}')? (elements+=RequirementModelElement (","
	//	elements+=RequirementModelElement)*)?;
	public RequirementsModelElements getRequirementsModelAccess() {
		return pRequirementsModel;
	}
	
	public ParserRule getRequirementsModelRule() {
		return getRequirementsModelAccess().getRule();
	}
	
	//RequirementModelElement:
	//	RequirementsGroup | Requirement;
	public RequirementModelElementElements getRequirementModelElementAccess() {
		return pRequirementModelElement;
	}
	
	public ParserRule getRequirementModelElementRule() {
		return getRequirementModelElementAccess().getRule();
	}
	
	//Expression:
	//	OR | AND | NOT | Literal;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Attribute:
	//	{Attribute}
	//	'attribute'
	//	id=EString;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Constraint:
	//	{Constraint}
	//	'new' 'constraint'
	//	name=EString (expression+=Expression ("," expression+=Expression)*)?;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//RequirementsGroup:
	//	{RequirementsGroup}
	//	'requirementsGroup'
	//	name=EString
	//	'id' 'is' id=EString ('description' 'is' description=EString)? ('constraints' 'are' '{' constraints+=Constraint (","
	//	constraints+=Constraint)* '}')? ('elements' 'are' '{' elements+=RequirementModelElement (","
	//	elements+=RequirementModelElement)* '}')?;
	public RequirementsGroupElements getRequirementsGroupAccess() {
		return pRequirementsGroup;
	}
	
	public ParserRule getRequirementsGroupRule() {
		return getRequirementsGroupAccess().getRule();
	}
	
	//Requirement:
	//	{Requirement}
	//	'requirement'
	//	name=EString
	//	'id' 'is' id=EString '.' ('description' 'is' description=EString '.')?
	//	'type' 'is' type=RequirementType '.'
	//	'priority' 'is' priority=RequirementPriority '.' ('constraints' 'are' '{' constraints+=Constraint (","
	//	constraints+=Constraint)* '}')? ('attributes' 'are' '{' attributes+=AttributeValue ("," attributes+=AttributeValue)*
	//	'}')?;
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//OR:
	//	'('
	//	operand1=Expression
	//	'OR'
	//	operand2=Expression
	//	')';
	public ORElements getORAccess() {
		return pOR;
	}
	
	public ParserRule getORRule() {
		return getORAccess().getRule();
	}
	
	//AND:
	//	'['
	//	operand1=Expression
	//	'AND'
	//	operand2=Expression
	//	']';
	public ANDElements getANDAccess() {
		return pAND;
	}
	
	public ParserRule getANDRule() {
		return getANDAccess().getRule();
	}
	
	//NOT:
	//	'('
	//	'NOT'
	//	operand1=Expression
	//	')';
	public NOTElements getNOTAccess() {
		return pNOT;
	}
	
	public ParserRule getNOTRule() {
		return getNOTAccess().getRule();
	}
	
	//Literal:
	//	element=[RequirementModelElement|EString];
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//enum RequirementType:
	//	FUNCTIONAL | NON_FUNCTIONAL | NONE | OTHER;
	public RequirementTypeElements getRequirementTypeAccess() {
		return eRequirementType;
	}
	
	public EnumRule getRequirementTypeRule() {
		return getRequirementTypeAccess().getRule();
	}
	
	//enum RequirementPriority:
	//	ESSENTIAL | CONDITIONAL | OPTIONAL;
	public RequirementPriorityElements getRequirementPriorityAccess() {
		return eRequirementPriority;
	}
	
	public EnumRule getRequirementPriorityRule() {
		return getRequirementPriorityAccess().getRule();
	}
	
	//AttributeValue:
	//	{AttributeValue}
	//	'attributeValue'
	//	value=EString?
	//	'of' valueOf=[Attribute|EString];
	public AttributeValueElements getAttributeValueAccess() {
		return pAttributeValue;
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
