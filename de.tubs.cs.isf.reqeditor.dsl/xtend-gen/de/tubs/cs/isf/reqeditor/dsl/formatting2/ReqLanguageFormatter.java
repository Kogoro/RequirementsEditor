/**
 * generated by Xtext 2.11.0
 */
package de.tubs.cs.isf.reqeditor.dsl.formatting2;

import com.google.inject.Inject;
import de.tubs.cs.isf.reqeditor.dsl.services.ReqLanguageGrammarAccess;
import de.tubs.cs.isf.requirementseditor.Attribute;
import de.tubs.cs.isf.requirementseditor.Constraint;
import de.tubs.cs.isf.requirementseditor.Expression;
import de.tubs.cs.isf.requirementseditor.RequirementModelElement;
import de.tubs.cs.isf.requirementseditor.RequirementsModel;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ReqLanguageFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ReqLanguageGrammarAccess _reqLanguageGrammarAccess;
  
  protected void _format(final RequirementsModel requirementsModel, @Extension final IFormattableDocument document) {
    EList<RequirementModelElement> _elements = requirementsModel.getElements();
    for (final RequirementModelElement requirementModelElement : _elements) {
      document.<RequirementModelElement>format(requirementModelElement);
    }
    EList<Attribute> _attributes = requirementsModel.getAttributes();
    for (final Attribute attribute : _attributes) {
      document.<Attribute>format(attribute);
    }
  }
  
  protected void _format(final Constraint constraint, @Extension final IFormattableDocument document) {
    EList<Expression> _expression = constraint.getExpression();
    for (final Expression expression : _expression) {
      document.<Expression>format(expression);
    }
  }
  
  public void format(final Object constraint, final IFormattableDocument document) {
    if (constraint instanceof XtextResource) {
      _format((XtextResource)constraint, document);
      return;
    } else if (constraint instanceof Constraint) {
      _format((Constraint)constraint, document);
      return;
    } else if (constraint instanceof RequirementsModel) {
      _format((RequirementsModel)constraint, document);
      return;
    } else if (constraint instanceof EObject) {
      _format((EObject)constraint, document);
      return;
    } else if (constraint == null) {
      _format((Void)null, document);
      return;
    } else if (constraint != null) {
      _format(constraint, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(constraint, document).toString());
    }
  }
}
